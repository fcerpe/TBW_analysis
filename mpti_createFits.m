function [fitresult, gof] = mpti_createFits(SOA_L, sL, SOA_R, sR, dL, dR, vis)
%  Auto-generated by MATLAB on 30-Jun-2020 14:56:27

%% Initialization.
% Initialize arrays to store fits and goodness-of-fit.
fitresult = cell( 4, 1 );
gof = struct( 'sse', cell( 4, 1 ), ...
    'rsquare', [], 'dfe', [], 'adjrsquare', [], 'rmse', [] );

%% Fit: 'mpti_SL'.
[xData, yData] = prepareCurveData( SOA_L, sL );

% Set up fittype and options.
ft = fittype( '1/(1+exp(b*(t-x)))', 'independent', 'x', 'dependent', 'y' );
opts = fitoptions( 'Method', 'NonlinearLeastSquares' );
opts.Display = 'Off';
opts.StartPoint = [0.1 -200];

% Fit model to data.
[fitresult{1}, gof(1)] = fit( xData, yData, ft, opts );

% Plot fit with data.
if vis
    figure( 'Name', 'mpti_SL' );
    h = plot( fitresult{1}, xData, yData );
    legend( h, 'sL vs. SOA_L', 'mpti_SL', 'Location', 'NorthEast', 'Interpreter', 'none' );
    % Label axes
    xlabel( 'SOA_L', 'Interpreter', 'none' );
    ylabel( 'sL', 'Interpreter', 'none' );
    grid on
end
%% Fit: 'mpti_SR'.
[xData, yData] = prepareCurveData( SOA_R, sR );

% Set up fittype and options.
ft = fittype( '1/(1+exp(b*(t-x)))', 'independent', 'x', 'dependent', 'y' );
opts = fitoptions( 'Method', 'NonlinearLeastSquares' );
opts.Display = 'Off';
opts.StartPoint = [-0.1 200];

% Fit model to data.
[fitresult{2}, gof(2)] = fit( xData, yData, ft, opts );

% Plot fit with data.
if vis
    figure( 'Name', 'mpti_SR' );
    h = plot( fitresult{2}, xData, yData );
    legend( h, 'sR vs. SOA_R', 'mpti_SR', 'Location', 'NorthEast', 'Interpreter', 'none' );
    % Label axes
    xlabel( 'SOA_R', 'Interpreter', 'none' );
    ylabel( 'sR', 'Interpreter', 'none' );
    grid on
end
%% Fit: 'mpti_DL'.
[xData, yData] = prepareCurveData( SOA_L, dL );

% Set up fittype and options.
ft = fittype( '1/(1+exp(b*(t-x)))', 'independent', 'x', 'dependent', 'y' );
opts = fitoptions( 'Method', 'NonlinearLeastSquares' );
opts.Display = 'Off';
opts.StartPoint = [0.1 -200];

% Fit model to data.
[fitresult{3}, gof(3)] = fit( xData, yData, ft, opts );

% Plot fit with data.
if vis
    figure( 'Name', 'mpti_DL' );
    h = plot( fitresult{3}, xData, yData );
    legend( h, 'dL vs. SOA_L', 'mpti_DL', 'Location', 'NorthEast', 'Interpreter', 'none' );
    % Label axes
    xlabel( 'SOA_L', 'Interpreter', 'none' );
    ylabel( 'dL', 'Interpreter', 'none' );
    grid on
end
%% Fit: 'mpti_DR'.
[xData, yData] = prepareCurveData( SOA_R, dR );

% Set up fittype and options.
ft = fittype( '1/(1+exp(b*(t-x)))', 'independent', 'x', 'dependent', 'y' );
opts = fitoptions( 'Method', 'NonlinearLeastSquares' );
opts.Display = 'Off';
opts.StartPoint = [-0.1 200];

% Fit model to data.
[fitresult{4}, gof(4)] = fit( xData, yData, ft, opts );

% Plot fit with data.
if vis
    figure( 'Name', 'mpti_DR' );
    h = plot( fitresult{4}, xData, yData );
    legend( h, 'dR vs. SOA_R', 'mpti_DR', 'Location', 'NorthEast', 'Interpreter', 'none' );
    % Label axes
    xlabel( 'SOA_R', 'Interpreter', 'none' );
    ylabel( 'dR', 'Interpreter', 'none' );
    grid on
end

